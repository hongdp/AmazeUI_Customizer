{
  "name": "umd",
  "version": "3.0.1",
  "description": "Universal Module Definition for use in automated build systems",
  "bin": {
    "umd": "./bin/cli.js"
  },
  "dependencies": {},
  "devDependencies": {
    "brfs": "^1.3.0",
    "linify": "~1.0.1",
    "mocha": "*",
    "uglify-js": "~2.4.0"
  },
  "scripts": {
    "build": "uglifyjs template.js > template.min.js && brfs source.js > index.js",
    "test": "npm run build && mocha -R spec",
    "prepublish": "npm run build && linify transform bin"
  },
  "files": [
    "index.js",
    "bin/cli.js"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/umd.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# umd\n<img src=\"http://i.imgur.com/ypw29XY.png\" align=\"right\"/>\n\nUniversal Module Definition for use in automated build systems\n\n - simple synchronous wrapping of a string\n - `return` style module support\n - CommonJS support\n - prevents internal UMDs from conflicting\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/umd/master.svg)](https://travis-ci.org/ForbesLindesay/umd)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/umd.svg)](https://gemnasium.com/ForbesLindesay/umd)\n[![NPM version](https://img.shields.io/npm/v/umd.svg)](http://badge.fury.io/js/umd)\n\n## Source Format\n\nIn order for the UMD wrapper to work the source code for your module should `return` the export, e.g.\n\n```javascript\nfunction method() {\n  //code\n}\nmethod.helper = function () {\n  //code\n}\nreturn method;\n```\n\nFor examples, see the examples directory.  The CommonJS module format is also supported by passing true as the second argument to methods.\n\n## API\n\noptions:\n\n - `commonJS` (default: `false`) - If commonJS is `true` then it will accept CommonJS source instead of source code which `return`s the module.\n\n### umd(name, source, [options])\n\n  The `name` should the the name of the module.  Use a string like name, all lower case with hyphens instead of spaces.\n\n  If `source` should be a string, that is wrapped in umd and returned as a string.\n\n### umd.prelude(module, [options])\n\n  return the text which will be inserted before a module.\n\n### umd.postlude(module, [options])\n\n  return the text which will be inserted after a module.\n\n## Command Line\n\n```\nUsage: umd <name> <source> <destination> [options]\n\nPipe Usage: umd <name> [options] < source > destination\n\nOptions:\n\n -h --help     Display usage information\n -c --commonJS Use CommonJS module format\n ```\n\n You can easilly pipe unix commands together like:\n\n ```js\n cat my-module.js | umd my-module | uglify-js > my-module.umd.min.js\n ```\n\n## Name Casing and Characters\n\nThe `name` passed to `umd` will be converted to camel case (`my-library` becomes `myLibrary`) and may only contain:\n\n* alphanumeric characters\n* $\n* _\n\nThe name may not begin with a number. Invalid characters will be stripped. \n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/umd/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/umd#readme",
  "_id": "umd@3.0.1",
  "_from": "umd@>=3.0.0 <4.0.0"
}
